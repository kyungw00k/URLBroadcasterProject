package kyungw00k.URLBroadcaster;

import android.app.Activity;
import android.app.PendingIntent;
import android.appwidget.AppWidgetManager;
import android.appwidget.AppWidgetProvider;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.util.Log;
import android.webkit.URLUtil;
import android.widget.RemoteViews;
import android.widget.Toast;
import com.google.analytics.tracking.android.EasyTracker;

public class SwitchWidgetProvider extends AppWidgetProvider {
    static final String CHECKED = "checked";
    private static final String TAG = SwitchWidgetProvider.class.getSimpleName();
    private static int instanceCount = 0;
    private static State widgetState = State.UNREGISTERED;
    private boolean isChecked = false;

    public static State getState() {
        return widgetState;
    }

    public static void setState(State state) {
        widgetState = state;
    }

    @Override
    public void onEnabled(Context context) {
        super.onEnabled(context);
        EasyTracker.getInstance().setContext(context);

        ++instanceCount;
    }

    @Override
    public void onDeleted(Context context, int[] appWidgetIds) {
        super.onDeleted(context, appWidgetIds);
        --instanceCount;

        if ( instanceCount == 0 ) {
            GCMIntentService.unregister(context.getApplicationContext());
        }
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.d(TAG, "onReceive : " + intent.getAction());

        if ( intent.getAction().equals(Consts.MESSAGE_CLICK) || intent.getAction().equals(Consts.MESSAGE_GCM_STATUS) ) {

            // Check if account has added.
            if ( !Util.checkUserAccount(context) ) {
                return ;
            }

            if ( intent.getAction().equals(Consts.MESSAGE_CLICK) ) {
                handleButtonStatus(context, intent);
            }

            if ( intent.getAction().equals(Consts.MESSAGE_GCM_STATUS) ) {
                handleGcmStatus(context, intent);
            }

            widgetUpdate(context);
        } else {
            super.onReceive(context, intent);
        }

    }

    private void widgetUpdate(Context context) {
        // Widget Update
        AppWidgetManager manager = AppWidgetManager.getInstance(context);
        this.onUpdate(context, manager, manager.getAppWidgetIds(new ComponentName(context, SwitchWidgetProvider.class)));

    }

    private void handleButtonStatus(Context context, Intent intent) {
        Log.d(TAG, "handleButtonStatus");

        // button is clicked.
        SharedPreferences pref = context.getSharedPreferences(CHECKED, Activity.MODE_PRIVATE);

        // default value is true.
        isChecked = pref.getBoolean(CHECKED, true);
        SharedPreferences.Editor e = pref.edit();
        e.putBoolean(CHECKED, !isChecked);
        e.commit();
        isChecked = intent.getBooleanExtra(CHECKED, false);

        // toggle button.
        isChecked = !isChecked;
    }

    private void handleGcmStatus(Context context, Intent intent) {
        Log.d(TAG, "handleGcmStatus");

        /*
         * If we are dealing with an intent generated by the GCMIntentService
         * class, then display the provided message.
         */
        if ( intent.getBooleanExtra("gcmIntentServiceMessage", false) ) {
            if ( intent.getBooleanExtra("registrationMessage", false) ) {
                if ( intent.getBooleanExtra("error", false) ) {
                      /*
                       * If we get a registration/unregistration-related error,
                       * and we're in the process of registering, then we move
                       * back to the unregistered state. If we're in the process
                       * of unregistering, then we move back to the registered
                       * state.
                       */
                    if ( getState() == State.REGISTERING ) {
                        Log.d(TAG, "Switch to UNREGISTERED");
                        setState(State.UNREGISTERED);
                    } else {
                        Log.d(TAG, "Switch to REGISTERED");
                        setState(State.REGISTERED);
                    }
                } else {
                      /*
                       * If we get a registration/unregistration-related success,
                       * and we're in the process of registering, then we move to
                       * the registered state. If we're in the process of
                       * unregistering, the we move back to the unregistered
                       * state.
                       */
                    if ( getState() == State.REGISTERING ) {
                        Log.d(TAG, "Switch to REGISTERED");
                        setState(State.REGISTERED);
                    } else {
                        Log.d(TAG, "Switch to UNREGISTERED");
                        setState(State.UNREGISTERED);
                    }
                }
            } else if ( getState() == State.REGISTERED ) {
                String url = intent.getStringExtra("message");

                if ( URLUtil.isHttpsUrl(url) || URLUtil.isHttpUrl(url) ) {
                    Util.toastMessage(context, "Go to " + url, Toast.LENGTH_SHORT);
                    Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
                    if ( browserIntent != null ) {
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                        PendingIntent p = PendingIntent.getActivity( context, 0, browserIntent, 0);
                        try {
                            p.send();
                        } catch ( PendingIntent.CanceledException e ) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }

    @Override
    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
        super.onUpdate(context, appWidgetManager, appWidgetIds);

        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);

        for ( int appWidgetId : appWidgetIds ) {
            // Widget Switch Toggle

            Intent intentClick = new Intent(Consts.MESSAGE_CLICK);
            intentClick.putExtra(CHECKED, isChecked);
            PendingIntent pendingIntentClick = PendingIntent.getBroadcast(context, 0, intentClick, PendingIntent.FLAG_UPDATE_CURRENT);

            // Invoke GCM Service
            if ( isChecked ) {
                if ( getState().equals(State.UNREGISTERED) ) {
                    Log.d(TAG, "Try to REGISTERING");
                    setState(State.REGISTERING);
                    try {
                        GCMIntentService.register(context.getApplicationContext());
                    } catch ( Exception e ) {
                        Log.d(TAG, "EXCEPTION OCCURS", e);
                        setState(State.UNREGISTERED);
                    }
                } else if ( getState().equals(State.REGISTERED) ) {
                    Log.d(TAG, "Try to UNREGISTERING");
                    setState(State.UNREGISTERING);
                    GCMIntentService.unregister(context.getApplicationContext());
                }
            }

            views.setOnClickPendingIntent(R.id.onoff, pendingIntentClick);

            // View Update
            if ( getState().equals(State.REGISTERED) || getState().equals(State.REGISTERING) ) {
                views.setImageViewResource(R.id.onoff, R.drawable.on);
            } else {
                views.setImageViewResource(R.id.onoff, R.drawable.off);
            }

            // Setting Activity
            {
                Intent intentSetting = new Intent(context, SettingActivity.class);
                intentSetting.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
                PendingIntent pendingIntentSetting = PendingIntent.getActivity(context, 0, intentSetting, PendingIntent.FLAG_UPDATE_CURRENT);
                views.setOnClickPendingIntent(R.id.config, pendingIntentSetting);
            }

            // Update widget_layout
            appWidgetManager.updateAppWidget(appWidgetId, views);
        }
    }

    enum State {
        REGISTERED, REGISTERING, UNREGISTERED, UNREGISTERING
    }

}
